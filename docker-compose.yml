version: "3.8"

services:
  flask-app:
    build: .
    ports:
      - "5001:5000"
    volumes:
      - .:/app
    # Use env_file to load all variables from .env, including the updated OLLAMA_BASE_URL
    env_file:
      - .env
    environment:
      - FLASK_ENV=development
      - FLASK_APP=manage.py
    depends_on:
      - postgres
    networks:
      - app-network

  frontend:
    build:
      context: .
      dockerfile: frontend.Dockerfile
    ports:
      - "3001:3000"
    volumes:
      - ./frontend:/app/frontend
      - /app/frontend/node_modules
    environment:
      - NODE_ENV=development
    depends_on:
      - flask-app
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      # Set PGUSER for psql commands in init scripts
      PGUSER: ${DB_USER}
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
      - ./init_data/ytbooks_dump.sql:/tmp/ytbooks_dump.sql
      - ./init_data/init.sh:/docker-entrypoint-initdb.d/init.sh
    command: ["postgres", "-c", "log_statement=all"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

    ports:
      - "5432:5432"
    networks:
      - app-network

  db-backup:
    image: postgres:15-alpine
    volumes:
      - ./backup_db.sh:/backup_db.sh
      - ./init_data:/init_data
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: ["/bin/bash", "-c"]
    command: ["chmod +x /backup_db.sh && /backup_db.sh"]
    networks:
      - app-network

  adminer:
    image: adminer
    restart: always
    ports:
      - "8081:8080" # Changed host port to 8081 to avoid conflict
    depends_on:
      - postgres
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
